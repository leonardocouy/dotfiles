#!/bin/bash -e

code() {
  VSCODE_CWD="$PWD" open -nW -a "Visual Studio Code" --args "$@"
}

vscode() {
  code "$@"
}

tmrs() {
  SESSION=`basename $PWD`

  if tmux has-session -t "$SESSION" 2> /dev/null; then
    tmux attach -t "$SESSION"
  else
    # Start up a tmux session
    tmux -2 new-session -d -s $SESSION

    # Window for running development server
    tmux send-keys 'bundle exec rails s' 'C-m'
    tmux rename-window 'server'

    # Rails console window
    tmux new-window -t $SESSION:2 -n 'console'
    tmux send-keys 'bundle exec rails c' 'C-m'

    # Services (Sidekiq, Mailhog)
    ###########
    # Sidekiq #
    ###########
    # Mailhog #
    ###########

    tmux new-window -t $SESSION:3 -n 'services'
    tmux split-window -v
    tmux select-pane -t 1
    tmux send-keys "bundle exec sidekiq" 'C-m'
    tmux select-pane -t 2
    tmux send-keys "mailhog" 'C-m'

    # RSpec window for running tests
    tmux new-window -t $SESSION:4 -n 'rspec'

    # Shell
    tmux new-window -t $SESSION:5 -n 'bash'

    # Select the first window
    tmux select-window -t $SESSION:1

    # Attach the tmux session
    tmux attach -t $SESSION:1
  fi
}

# Show all the names (CNs and SANs) listed in the SSL certificate
# for a given domain
getcertnames() {
  if [ -z "${1}" ]; then
    echo "ERROR: No domain specified."
    return 1
  fi

  local domain="${1}"
  echo "Testing ${domain}â€¦"
  echo # newline

  local tmp=$(echo -e "GET / HTTP/1.0\nEOT" \
    | openssl s_client -connect "${domain}:443" 2>&1);

  if [[ "${tmp}" = *"-----BEGIN CERTIFICATE-----"* ]]; then
    local certText=$(echo "${tmp}" \
      | openssl x509 -text -certopt "no_header, no_serial, no_version, \
      no_signame, no_validity, no_issuer, no_pubkey, no_sigdump, no_aux");
      echo "Common Name:"
      echo # newline
      echo "${certText}" | grep "Subject:" | sed -e "s/^.*CN=//";
      echo # newline
      echo "Subject Alternative Name(s):"
      echo # newline
      echo "${certText}" | grep -A 1 "Subject Alternative Name:" \
        | sed -e "2s/DNS://g" -e "s/ //g" | tr "," "\n" | tail -n +2
      return 0
  else
    echo "ERROR: Certificate not found.";
    return 1
  fi
}

# Kill processes by name
jkill() {
  local process=$@
  ps ax | grep "$process" | grep -v grep | awk '{print $1}' | xargs kill -9
}
